#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2013-2015 by Jim Klimov
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T.
# All rights reserved.
#
#

. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

# Report selected mounts to /dev/msglog and custom mounting-log file,
# beside the usual SMF log (via stdout)?
debug_mnt=0
[ -f /.debug_mnt ] && debug_mnt=1

# Report to console if enabled, and to SMF log always
decho() {
	[ x"$debug_mnt" = x1 ] && echo "$*" >/dev/msglog \
		&& echo "$0: $*" >>/etc/svc/volatile/fs-root.log 2>/dev/null
	echo "$*"
}

# Mount other file systems to be available in single user mode.
# Currently, these are /var, /var/adm, /var/run and /tmp.  A change
# here will require a modification to the following programs (and
# documentation): /sbin/mountall, /sbin/umountall, and
# /lib/svc/bin/svc.startd.

rootiszfs=0
readmnttab / < /etc/mnttab
if [ "$fstype" = zfs ] ; then
	rootiszfs=1
	be=$special
fi

for fs in /var /var/adm /tmp; do
	readvfstab $fs < $vfstab
	if [ -n "$mountp" ]; then
		mounted $mountp $mntopts $fstype < /etc/mnttab && continue
		checkfs $fsckdev $fstype $mountp || exit $SMF_EXIT_ERR_FATAL
		decho "Mounting '$fs': use '$mountp' of type '$fstype' with opts '$mntopts' from vfstab"
		mountfs -O $mountp $fstype $mntopts - ||
		    exit $SMF_EXIT_ERR_FATAL
		continue
	fi
	if [ "$rootiszfs" = 1 ]; then
		mountpt=`zfs get -H -o value mountpoint $be$fs 2>/dev/null`
		if [ $? = 0 ] ; then
			if [ "x$mountpt" = "x$fs" ] ; then
				readmnttab $mountpt < /etc/mnttab && \
					[ "x$fstype" = xzfs ] && \
					[ "x$special" = "x$be$fs" ] && \
					decho "Already mounted: '$fs' from '$be$fs': in same root hierarchy" && \
					continue
				decho "Mounting '$fs': use '$be$fs': in same root hierarchy"
				/sbin/zfs mount -O $be$fs
				continue
			fi
		fi
		# These mountpoints can be shared among BEs in a separate tree.
		# Find and mount matching automountable datasets; if there is
		# choice - prefer the (first found?) one in the current rpool.
		mountdslist="`zfs list -H -o canmount,mountpoint,name | awk '( $1 == "on" && $2 == "'"$fs"'" ) {print $3}' 2>/dev/null`"
		if [ $? = 0 -a "x$mountdslist" != x ] ; then
			if [ "x`echo "$mountdslist"|wc -l|sed 's/ //g'`" = x1 ]; then
				# We only had one hit
				readmnttab $mountpt < /etc/mnttab && \
					[ "x$fstype" = xzfs ] && \
					[ "x$special" = "x$mountdslist" ] && \
					decho "Already mounted: '$fs' from '$mountdslist': the only option" && \
					continue
				decho "Mounting '$fs': use '$mountdslist': the only option"
				/sbin/zfs mount -O "$mountdslist"
				continue
			else
				rpoolname="`echo "$be" | awk -F/ '{print $1}'`"
				mountdspref="`echo "$mountdslist" | egrep '^'"$rpoolname/" | head -1`"
				if [ $? = 0 -a "x$mountdspref" != x ] ; then
					readmnttab $mountpt < /etc/mnttab && \
						[ "x$fstype" = xzfs ] && \
						[ "x$special" = "x$mountdspref" ] && \
						decho "Already mounted: '$fs' from '$mountdspref': same rpool" && \
						continue
					decho "Mounting '$fs': use '$mountdspref': same rpool"
					/sbin/zfs mount -O "$mountdspref"
					continue
				fi
				# This is the least-definite situation: several
				# matching datasets exist, and none on the current
				# rpool. See if any pools can be ruled out due to
				# bad (non-default) altroots.
				for mountds in $mountdslist; do
					dspool="`echo "$mountds" | awk -F/ '{print $1}'`"
					dspool_altroot="`zpool list -H -o altroot "$dspool"`"
					if [ $? = 0 -a \
					     x"$dspool_altroot" = "x-" -o \
					     x"$dspool_altroot" = "x/" ]; then
						readmnttab $mountpt < /etc/mnttab && \
							[ "x$fstype" = xzfs ] && \
							[ "x$special" = "x$mountds" ] && \
							decho "Already mounted: '$fs' from '$mountds': good altroot" && \
							continue
						decho "Mounting '$fs': use '$mountds': good altroot"
						/sbin/zfs mount -O "$mountds"
						continue
					fi
				done
			fi
		fi
		# Technically, it is possible to have a pool named var with
		# the default altroot and a dataset "var/adm" with an inherited
		# mountpoint, which should automount into "/var/adm". TBD...
	fi  ### if root is ZFS
done

mounted /var/run - tmpfs < /etc/mnttab
if [ $? != 0 ] ; then
	mountfs -O /var/run tmpfs - swap || exit $SMF_EXIT_ERR_FATAL
fi

if [ ! -f /var/run/tzsync ] ; then
	/sbin/tzreload -I
fi

if [ "$rootiszfs" = 1 ] ; then
	_SKIP=0
	# Mount (other) possible children of current rootfs dataset
	/sbin/zfs list -rH -o mountpoint -s mountpoint -t filesystem $be | \
	    while read mountp ; do
		# Skip the rootfs itself regardless of its mountpoint name
		[ "$_SKIP" = 0 ] && _SKIP=1 && continue

		if [ "x$mountp" != "x" -a "$mountp" != "legacy" ] ; then
			mounted $mountp - zfs < /etc/mnttab && \
				decho "Already mounted: '$mountp' from '$be$mountp': in same root hierarchy" && \
				continue
			decho "Mounting '$mountp': use '$be$mountp': in same root hierarchy"
			/sbin/zfs mount $be$mountp
		fi
	done
fi

exit $SMF_EXIT_OK
